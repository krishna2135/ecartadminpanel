{"ast":null,"code":"import { parseRootMargin, shallowCompare } from './utils';\nexport var observerElementsMap = new Map();\nexport function getPooled() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var root = options.root || null;\n  var rootMargin = parseRootMargin(options.rootMargin);\n  var threshold = Array.isArray(options.threshold) ? options.threshold : [options.threshold != null ? options.threshold : 0];\n  var observers = observerElementsMap.keys();\n  var observer = void 0;\n\n  while (observer = observers.next().value) {\n    var unmatched = root !== observer.root || rootMargin !== observer.rootMargin || shallowCompare(threshold, observer.thresholds);\n\n    if (!unmatched) {\n      return observer;\n    }\n  }\n\n  return null;\n}\nexport function findObserverElement(observer, entry) {\n  var elements = observerElementsMap.get(observer);\n\n  if (elements) {\n    var values = elements.values();\n    var element = void 0;\n\n    while (element = values.next().value) {\n      if (element.target === entry.target) {\n        return element;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * The Intersection Observer API callback that is called whenever one element,\n * called the target, intersects either the device viewport or a specified element.\n * Also will get caled whenever the visibility of the target element changes and\n * crosses desired amounts of intersection with the root.\n * @param {array} changes\n * @param {IntersectionObserver} observer\n */\n\nexport function callback(changes, observer) {\n  for (var i = 0; i < changes.length; i++) {\n    var element = findObserverElement(observer, changes[i]);\n\n    if (element) {\n      element.handleChange(changes[i]);\n    }\n  }\n}\nexport function createObserver(options) {\n  return getPooled(options) || new IntersectionObserver(callback, options);\n}\nexport function observeElement(element) {\n  if (!observerElementsMap.has(element.observer)) {\n    observerElementsMap.set(element.observer, new Set());\n  }\n\n  observerElementsMap.get(element.observer).add(element);\n  element.observer.observe(element.target);\n}\nexport function unobserveElement(element) {\n  if (observerElementsMap.has(element.observer)) {\n    var targets = observerElementsMap.get(element.observer);\n\n    if (targets.delete(element)) {\n      if (targets.size > 0) {\n        element.observer.unobserve(element.target);\n      } else {\n        element.observer.disconnect();\n        observerElementsMap.delete(element.observer);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}