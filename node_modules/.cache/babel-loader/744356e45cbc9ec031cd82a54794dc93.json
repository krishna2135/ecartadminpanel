{"ast":null,"code":"import React from 'react';\nexport function isDOMTypeElement(element) {\n  return React.isValidElement(element) && typeof element.type === 'string';\n}\nvar marginRE = /^-?\\d*\\.?\\d+(px|%)$/;\nexport function parseRootMargin(rootMargin) {\n  var marginString = rootMargin ? rootMargin.trim() : '0px';\n\n  var _marginString$split$m = marginString.split(/\\s+/).map(function (margin) {\n    if (!marginRE.test(margin)) {\n      throw new Error('rootMargin must be a string literal containing pixels and/or percent values');\n    }\n\n    return margin;\n  }),\n      _marginString$split$m2 = _marginString$split$m[0],\n      m0 = _marginString$split$m2 === undefined ? '0px' : _marginString$split$m2,\n      _marginString$split$m3 = _marginString$split$m[1],\n      m1 = _marginString$split$m3 === undefined ? m0 : _marginString$split$m3,\n      _marginString$split$m4 = _marginString$split$m[2],\n      m2 = _marginString$split$m4 === undefined ? m0 : _marginString$split$m4,\n      _marginString$split$m5 = _marginString$split$m[3],\n      m3 = _marginString$split$m5 === undefined ? m1 : _marginString$split$m5;\n\n  return m0 + ' ' + m1 + ' ' + m2 + ' ' + m3;\n}\nexport function shallowCompare(next, prev) {\n  if (Array.isArray(next) && Array.isArray(prev)) {\n    if (next.length === prev.length) {\n      return next.some(function (_, index) {\n        return shallowCompare(next[index], prev[index]);\n      });\n    }\n  }\n\n  return next !== prev;\n}","map":null,"metadata":{},"sourceType":"module"}